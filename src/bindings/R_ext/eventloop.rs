/* automatically generated by rust-bindgen 0.71.1 */

/* OS: unix */
/* Platform: aarch64-apple-darwin20 */
/* rustc 1.87.0-nightly (be73c1f46 2025-03-21) */
/* R version: 4.6.0 */

pub type InputHandlerProc =
    ::std::option::Option<unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void)>;
pub type InputHandler = _InputHandler;
#[doc = r" If Bindgen could only determine the size and alignment of a"]
#[doc = r" type, it is represented like this."]
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _InputHandler {
    pub activity: ::std::os::raw::c_int,
    pub fileDescriptor: ::std::os::raw::c_int,
    pub handler: InputHandlerProc,
    pub next: *mut _InputHandler,
    #[doc = " Whether we should be listening to this file descriptor or not."]
    pub active: ::std::os::raw::c_int,
    #[doc = " Data that can be passed to the routine as its only argument.\nThis might be a user-level function or closure when we implement\na callback to R mechanism."]
    pub userData: *mut ::std::os::raw::c_void,
}
pub const XActivity: u32 = 1;
pub const StdinActivity: u32 = 2;
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
unsafe extern "C" {
    pub fn initStdinHandler() -> *mut InputHandler;
    pub fn consoleInputHandler(buf: *mut ::std::os::raw::c_uchar, len: ::std::os::raw::c_int);
    pub fn addInputHandler(
        handlers: *mut InputHandler,
        fd: ::std::os::raw::c_int,
        handler: InputHandlerProc,
        activity: ::std::os::raw::c_int,
    ) -> *mut InputHandler;
    pub fn getInputHandler(
        handlers: *mut InputHandler,
        fd: ::std::os::raw::c_int,
    ) -> *mut InputHandler;
    pub fn removeInputHandler(
        handlers: *mut *mut InputHandler,
        it: *mut InputHandler,
    ) -> ::std::os::raw::c_int;
    pub fn getSelectedHandler(handlers: *mut InputHandler, mask: *mut fd_set) -> *mut InputHandler;
    pub fn R_checkActivity(
        usec: ::std::os::raw::c_int,
        ignore_stdin: ::std::os::raw::c_int,
    ) -> *mut fd_set;
    pub fn R_checkActivityEx(
        usec: ::std::os::raw::c_int,
        ignore_stdin: ::std::os::raw::c_int,
        intr: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> *mut fd_set;
    pub fn R_runHandlers(handlers: *mut InputHandler, mask: *mut fd_set);
    pub fn R_SelectEx(
        n: ::std::os::raw::c_int,
        readfds: *mut fd_set,
        writefds: *mut fd_set,
        exceptfds: *mut fd_set,
        timeout: *mut __BindgenOpaqueArray<u8, 0usize>,
        intr: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
    pub static mut R_InputHandlers: *mut InputHandler;
    pub static mut R_PolledEvents: ::std::option::Option<unsafe extern "C" fn()>;
    pub static mut R_wait_usec: ::std::os::raw::c_int;
}
